@model MyLocalGov.com.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    ViewData["HideNavbar"] = false;
}

<div class="dashboard-container">
        <header class="dashboard-header slide-in-up">
            <div class="d-flex justify-content-between align-items-start flex-wrap">
                <div>
                    <h1 class="dashboard-title">
                        üìä Dashboard Overview
                    </h1>
                    <p class="dashboard-subtitle">
                        Welcome to your municipal services portal
                    </p>
                </div>
                <div class="user-info">
                    <div class="user-avatar">
                        @Model.User.Avatar
                    </div>
                    <div>
                        <div style="font-weight: 600;">@Model.User.Name</div>
                        <div style="font-size: 14px;">ID: @Model.User.IdNumber</div>
                        <div style="font-size: 12px; color: var(--white-transparent-80);">@Model.User.Municipality - @Model.User.Ward</div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Dashboard Statistics -->
        <section class="dashboard-stats">
            <div class="stat-card slide-in-left stagger-1">
                <div class="stat-number">@Model.Stats.ActiveRequests</div>
                <div class="stat-label">Active Requests</div>
            </div>
            <div class="stat-card slide-in-left stagger-2">
                <div class="stat-number">@Model.Stats.CompletedIssues</div>
                <div class="stat-label">Completed Issues</div>
            </div>
            <div class="stat-card slide-in-left stagger-3">
                <div class="stat-number">@Model.Stats.UpcomingEvents</div>
                <div class="stat-label">Upcoming Events</div>
            </div>
            <div class="stat-card slide-in-left stagger-4">
                <div class="stat-number">@Model.Stats.UrgentNotices</div>
                <div class="stat-label">Urgent Notices</div>
            </div>
        </section>

        <!-- Quick Actions -->
        <section class="quick-actions">
            <h2 class="section-title slide-in-up">
                üöÄ Quick Actions
            </h2>
            <div class="actions-grid">
                <div class="action-card slide-in-up stagger-1" onclick="handleActionClick('report-issue', this)">
                    <span class="action-icon">üì¢</span>
                    <h3 class="action-title">Report an Issue</h3>
                    <p class="action-description">
                        Report municipal problems like potholes, water leaks, power outages, or waste collection issues to your local municipality.
                    </p>
                </div>
                
                <div class="action-card slide-in-up stagger-2" onclick="handleActionClick('request-service', this)">
                    <span class="action-icon">üìù</span>
                    <h3 class="action-title">Request Service</h3>
                    <p class="action-description">
                        Submit requests for municipal services such as permits, certificates, waste collection schedules, or general maintenance.
                    </p>
                </div>
                
                <div class="action-card slide-in-up stagger-3" onclick="handleActionClick('view-events', this)">
                    <span class="action-icon">üìÖ</span>
                    <h3 class="action-title">Local Events</h3>
                    <p class="action-description">
                        Browse upcoming community events, council meetings, and important municipal announcements in your area.
                    </p>
                </div>
                
                <div class="action-card slide-in-up stagger-4" onclick="handleActionClick('track-requests', this)">
                    <span class="action-icon">üìä</span>
                    <h3 class="action-title">Track My Requests</h3>
                    <p class="action-description">
                        Monitor the progress of your submitted issues and service requests with real-time status updates and notifications.
                    </p>
                </div>
            </div>
        </section>

        <!-- Recent Activity -->
        <section class="recent-activity slide-in-up">
            <h2 class="section-title">
                üïí Recent Activity
            </h2>
            <ul class="activity-list">
                @foreach (var activity in Model.RecentActivities)
                {
                    <li class="activity-item">
                        <div class="activity-icon">@activity.Icon</div>
                        <div class="activity-content">
                            <div class="activity-title">@activity.Title</div>
                            <div class="activity-description">@activity.Description</div>
                            <div class="activity-time">@activity.Timestamp.ToString("MMM dd, yyyy 'at' h:mm tt")</div>
                        </div>
                        <span class="status-badge @activity.StatusClass">@activity.StatusText</span>
                    </li>
                }
            </ul>
        </section>

        <!-- Municipal Announcements -->
        <section class="announcements slide-in-up">
            <h2 class="section-title">
                üì¢ Municipal Announcements
            </h2>
            @foreach (var announcement in Model.Announcements)
            {
                <div class="announcement-item">
                    <div class="announcement-title">@announcement.Icon @announcement.Title</div>
                    <div class="announcement-content">
                        @announcement.Content
                    </div>
                    <div class="announcement-date">Posted: @announcement.PostedDate.ToString("MMMM dd, yyyy")</div>
                </div>
            }
        </section>
    </div>

    <!-- JavaScript -->
    <script>
        // Page load animations
        document.addEventListener('DOMContentLoaded', function () {
            document.body.classList.add('page-loaded');
        });

        // Handle action card clicks with ripple effect
        function handleActionClick(action, element) {
            // Create ripple effect
            const ripple = document.createElement('span');
            const rect = element.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = event.clientX - rect.left - size / 2;
            const y = event.clientY - rect.top - size / 2;

            ripple.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                left: ${x}px;
                top: ${y}px;
                background: rgba(255,255,255,0.3);
                border-radius: 50%;
                transform: scale(0);
                animation: ripple 0.6s linear;
                pointer-events: none;
            `;

            element.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 600);

            // Handle different actions
            setTimeout(() => {
                switch (action) {
                    case 'report-issue':
                        alert('üöß Report Issue feature coming soon!\n\nThis will allow you to:\n‚Ä¢ Report potholes, water leaks, power outages\n‚Ä¢ Upload photos and location data\n‚Ä¢ Track repair progress\n‚Ä¢ Receive status notifications');
                        break;
                    case 'request-service':
                        alert('üìã Request Service feature coming soon!\n\nThis will allow you to:\n‚Ä¢ Request municipal permits\n‚Ä¢ Schedule waste collection\n‚Ä¢ Apply for certificates\n‚Ä¢ Book municipal facilities');
                        break;
                    case 'view-events':
                        alert('üé™ Local Events feature coming soon!\n\nThis will show you:\n‚Ä¢ Upcoming community events\n‚Ä¢ Council meetings\n‚Ä¢ Public hearings\n‚Ä¢ Municipal announcements\n‚Ä¢ Event registration');
                        break;
                    case 'track-requests':
                        alert('üìà Track Requests feature coming soon!\n\nThis will provide:\n‚Ä¢ Real-time status updates\n‚Ä¢ Request history\n‚Ä¢ Estimated completion times\n‚Ä¢ Communication with municipal staff\n‚Ä¢ Document downloads');
                        break;
                    default:
                        console.log('Unknown action:', action);
                }
            }, 300);
        }

        // Add hover animations for stats cards
        const statCards = document.querySelectorAll('.stat-card');
        statCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-5px) scale(1.02)';
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });

        // Add click animation for activity items
        const activityItems = document.querySelectorAll('.activity-item');
        activityItems.forEach(item => {
            item.addEventListener('click', function() {
                this.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 150);
            });
        });

        // Intersection Observer for scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Observe elements for scroll animations
        document.querySelectorAll('.slide-in-up, .slide-in-left, .slide-in-right').forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(30px)';
            observer.observe(el);
        });

        // Auto-refresh data simulation
        function updateDashboardData() {
            // Simulate real-time updates (in a real app, this would fetch from an API)
            console.log('Dashboard data refreshed at:', new Date().toLocaleTimeString());
        }

        // Refresh every 30 seconds
        setInterval(updateDashboardData, 30000);

        // Service worker registration for offline functionality (future enhancement)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                console.log('Dashboard ready for service worker registration');
            });
        }
    </script>
</div>

<link rel="stylesheet" href="~/css/Home/dashboard.css" asp-append-version="true" />
