@using Microsoft.AspNetCore.Identity
@{
	Layout = "_Layout";
	ViewData["Title"] = "Landing Page";
	ViewData["HideNavbar"] = true;
	var showForm = Context.Request.Query["showForm"].ToString();
	var email = Context.Request.Query["email"].ToString();
	var loginError = Context.Request.Query["loginError"].ToString();
	var registerError = Context.Request.Query["registerError"].ToString();
	bool formActive = !string.IsNullOrEmpty(showForm);
}

<main id="landingPageContainer">
	<div class="flex-col h-full w-full" style="min-height:100vh;" id="flex-main-container">

		<!-- Top spacer -->
		<div id="cell-top-spacer" class="flex-cell" style="max-height: 20vh; min-height: 20vh;"></div>

		<!-- Middle Row -->
		<div id="row-middle" class="flex-row flex-2 w-full">
			<!-- Left Spacer -->
			<div id="cell-left-spacer" class="flex-cell flex-1"></div>

			<!-- Info Area -->
			<div id="cell-info-area" class="flex-cell w-fit flex-main-start flex-cross-center">
				<!-- Logo + Title -->
				<div class="logo" id="logo">
					<span class="logo-icon">🏛️</span>
				</div>
				<h1 class="title" id="mainTitle">Civic Connect</h1>
				<!-- Subtitle + Button Group -->
				<div id="subtitle-btn-group" class="flex-cell flex-cross-center">
					<p class="subtitle text-center @(formActive ? "hidden" : "")" id="subtitle">
						Your South African municipal services portal.<br>
						<strong>Report issues • Request services • Stay informed</strong>
					</p>
					<button id="enterButton" class="btn btn-primary mt-3 @(formActive ? "hidden" : "")">
						Get Started →
					</button>
				</div>
			</div>

			<!-- Form Area (merged with form-container) -->
			<div id="cell-forms-area" class="flex-cell w-fit flex-main-start flex-cross-center @(formActive ? "active" : "flex-hidden")">
				<!-- Login Form -->
				<form id="loginForm" class="form @(showForm == "login" ? "active" : "")"
					  method="post" action="/Account/Login">
					<div class="title">
						Welcome,<br><span class="text-muted">login to continue</span>
					</div>
					@if (!string.IsNullOrEmpty(loginError))
					{
						<div class="alert alert-danger" role="alert">
							<span>@loginError</span>
						</div>
					}
					<input type="email" name="email" placeholder="Email"
						   class="form-control"
						   value="@(showForm == "login" ? email : "")" required />
					<input type="password" name="password" placeholder="Password"
						   class="form-control" required />
					<button type="submit" class="btn btn-success">Log In</button>
					<p class="text-center">
						<a href="#" id="showSignUp" class="switch-link">Need an account? Sign Up Here!</a>
					</p>
				</form>

				<!-- Register Form -->
				<form id="signUpForm" class="form @(showForm == "register" ? "active" : "")"
					  method="post" action="/Account/Register">
					<div class="title">
						Welcome,<br><span class="text-muted">create an account</span>
					</div>
					@if (!string.IsNullOrEmpty(registerError))
					{
						<div class="alert alert-danger" role="alert">
							<span>@registerError</span>
						</div>
					}
					<input type="text" name="firstName" placeholder="First Name"
						   class="form-control" required />
					<input type="text" name="lastName" placeholder="Last Name"
						   class="form-control" required />
					<input type="email" name="email" placeholder="Email"
						   class="form-control"
						   value="@(showForm == "register" ? email : "")" required />
					<input type="password" name="password" placeholder="Password"
						   class="form-control" required />
					<input type="password" name="confirmPassword" placeholder="Confirm Password"
						   class="form-control" required />
					<button type="submit" class="btn btn-success">Sign Up</button>
					<p class="text-center">
						<a href="#" id="showLogin" class="switch-link">Already have an account? Log In</a>
					</p>
				</form>
			</div>

			<!-- Right Spacer -->
			<div id="cell-right-spacer" class="flex-cell flex-1"></div>
		</div>

		<!-- Bottom Spacer -->
		<div id="cell-bottom-spacer" class="flex-cell flex-1"></div>
	</div>
</main>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" defer></script>

@section Scripts {
	<script>
		document.addEventListener("DOMContentLoaded", function() {
			document.body.classList.add("page-loaded");
			document.dispatchEvent(new Event("pageReady"));
		});

		window.onPageReady(function () {
			const enterButton = document.getElementById("enterButton");
			const subtitle = document.getElementById("subtitle");
			const formContainer = document.getElementById("cell-forms-area");
			const loginForm = document.getElementById("loginForm");
			const signUpForm = document.getElementById("signUpForm");
			const showSignUp = document.getElementById("showSignUp");
			const showLogin = document.getElementById("showLogin");
			const logo = document.getElementById("logo");
			const mainTitle = document.getElementById("mainTitle");
			const logoTitleWrapper = document.getElementById("logo-title-wrapper") || logo.parentElement;

			// Helper: Show only the form container, hide both forms
			function showFormContainer() {
				formContainer.classList.add("active");
				formContainer.classList.remove("flex-hidden");
				loginForm.classList.add("active", "hidden-visibility");
				signUpForm.classList.remove("active");
			}

			// Helper: Show the requested form (assumes container is visible)
			function showForm(type) {
				// Always remove hidden-visibility from both forms first
				loginForm.classList.remove("hidden-visibility");
				signUpForm.classList.remove("hidden-visibility");

				// Toggle active class based on type
				loginForm.classList.toggle("active", type === "login");
				signUpForm.classList.toggle("active", type === "register");
			}

			// Initial state based on Razor context
			if (formContainer.classList.contains("active")) {
				formContainer.classList.remove("flex-hidden");
			} else {
				formContainer.classList.add("flex-hidden");
				formContainer.classList.remove("active");
			}

			enterButton.addEventListener("click", async () => {
				// Step 1: fade out subtitle & button (parallel, CSS-based)
				await Promise.all([
					Animations.animate("fadeOut", enterButton, { duration: 50 })
				]);

				// Step 2: move logo/title and slide in login form (parallel, Anime.js)
				await Promise.all([
					Animations.animate("moveFLIP", logoTitleWrapper, {
						duration: 800,
						layoutChangeFn: showFormContainer
					}),
					Animations.animate("slideIn", loginForm, {
						direction: "down",
						distance: 200,
						duration: 800,
						layoutChangeFn: showForm("login")
					})
				]);
			});

			showSignUp.addEventListener("click", async (e) => {
				e.preventDefault();
				await Promise.all([
					Animations.animate("fadeOut", loginForm, {
						duration: 200,
						layoutChangeFn: () => loginForm.classList.remove("active")
					}),
					Animations.animate("slideIn", signUpForm, {
						direction: "right",
						distance: 200,
						duration: 550,
						layoutChangeFn: showForm("register")
					})
				]);
			});

			showLogin.addEventListener("click", async (e) => {
				e.preventDefault();
				await Promise.all([
					Animations.animate("fadeOut", signUpForm, {
						duration: 200,
						layoutChangeFn: () => signUpForm.classList.remove("active")
					}),
					Animations.animate("slideIn", loginForm, {
						direction: "left",
						distance: 200,
						duration: 550,
						layoutChangeFn: showForm("login")
					})
				]);
			});
		});
	</script>
}

<link rel="stylesheet" href="/css/Home/index.css" asp-append-version="true" />
<link rel="stylesheet" href="/css/Shared/flex-grid.css" asp-append-version="true" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
