@model MyLocalGov.com.ViewModels.Issues.IssueViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Report an Issue";
}
<head>
    <link rel="stylesheet" href="/css/Issues/ReportIssue.css" asp-append-version="true" />
</head>

<main class="fxg-u-container fxg-f-col fxg-u-gap-6 report-container" id="reportIssueRoot">
    <div class="fxg-f-row fxg-f-cross-center fxg-u-gap-4">
        <a asp-controller="Dashboard" asp-action="Index" class="report-breadcrumb-link">
            <i class="bi bi-arrow-left"></i>
            <span>Dashboard</span>
        </a>
        <span class="report-breadcrumb-separator">/</span>
        <span class="report-breadcrumb-current">Report Issue</span>
    </div>

    <section class="report-header">
        <h1 class="report-title">Report an Issue</h1>
        <p class="report-subtitle">Help your municipality address problems faster by reporting accurate details.</p>
    </section>

    <form asp-action="ReportIssue" asp-controller="Issues" method="post" enctype="multipart/form-data" class="fxg-f-col fxg-u-gap-6 report-form-card" id="reportForm">
        <!-- Wizard navigation at the top -->
        <div class="report-wizard-nav report-wizard-nav-top fxg-u-gap-0">
            <!-- Step counter -->
            <div class="report-wizard-step-indicator-top">
                <span id="stepIndicator">Step 1 of 4</span>
            </div>

            <!-- Nav Buttons with PROGRESS BAR -->
            <div class="report-wizard-controls fxg-f-row fxg-f-cross-center">
                <button type="button" class="btn btn-outline-success" id="prevBtn">Back</button>

                <div class="report-wizard-progress fxg-f-grow-1" role="progressbar" aria-label="Wizard progress">
                    <div class="report-wizard-progress-bar" id="wizardProgressBar" style="width:0%"></div>
                </div>

                <button type="button" class="btn btn-success" id="nextBtn">Next</button>
            </div>

            <!-- Engagement message -->
            <div class="report-wizard-engagement">
                <span id="engagementMessage">Pin the problem location — Step 1 of 4</span>
            </div>
        </div>

        <!-- Step 1 -->
        <section class="wizard-step" data-step="1">
            <h2 class="report-section-title">Location</h2>

            <div class="fxg-f-col fxg-u-gap-3">
                <!-- Hidden lat/lng fields (still bind and post) -->
                <input asp-for="Latitude" type="hidden" id="Latitude" />
                <input asp-for="Longitude" type="hidden" id="Longitude" />

                <div class="fxg-f-col fxg-u-gap-1 locationInputArea">

                    <!-- Composite location control -->
                    <div class="location-composite">
                        <div class="location-composite-row">
                            <!-- Bind this visible input to Address so unobtrusive validation applies -->
                            <input asp-for="Address"
                                   id="locationInput"
                                   class="fxg-f-grow-1 form-control location-input"
                                   placeholder="Search by address or place"
                                   autocomplete="off" />
                            <button type="button"
                                    class="btn location-btn"
                                    id="useMyLocationBtn"
                                    title="Use my current location">
                                <i class="bi bi-crosshair"></i>
                            </button>
                        </div>
                        <small id="coordsLabel" class="coords text-muted">Coordinates: UNKNOWN</small>
                    </div>

                    <!-- Address validation message -->
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>

                <div id="map" class="report-map" style="width: 100%; height: 320px; border-radius: 8px; overflow: hidden;"></div>
                <small class="report-hint">Drag the pin or click the map to adjust the location.</small>
            </div>
        </section>

        <!-- Step 2 -->
        <section class="wizard-step flex-hidden" data-step="2">
            <h2 class="report-section-title">Details</h2>
            <div class="fxg-f-col">
                <div class="fxg-f-col fxg-u-gap-0">
                    <label asp-for="CategoryID" class="form-label"></label>
                    <select asp-for="CategoryID" asp-items="Model.Categories" class="form-control"></select>
                    <span asp-validation-for="CategoryID" class="text-danger"></span>
                </div>
                <div class="fxg-f-col fxg-u-gap-0">
                    <div class="fxg-f-row">
                        <label class="form-label">Description (rich text)</label>
                        <div id="rteToolbar" class="report-rte-toolbar fxg-f-row fxg-u-gap-2">
                            <button type="button" class="btn btn-outline-success btn-sm" data-cmd="bold" title="Bold"><i class="bi bi-type-bold"></i></button>
                            <button type="button" class="btn btn-outline-success btn-sm" data-cmd="italic" title="Italic"><i class="bi bi-type-italic"></i></button>
                            <button type="button" class="btn btn-outline-success btn-sm" data-cmd="insertUnorderedList" title="Bulleted List"><i class="bi bi-list-ul"></i></button>
                        </div>
                    </div>
                    <div id="rteEditor" class="report-rte-editor" contenteditable="true" aria-label="Issue description"></div>

                    <!-- Add custom unobtrusive rule so "HTML-only" doesn't pass required -->
                    <textarea asp-for="Description"
                              id="descriptionHidden"
                              class="flex-hidden"
                              data-val="true"
                              data-val-rterequired="Description is required."></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                    <small class="report-hint">Use the toolbar above for basic formatting.</small>
                </div>
            </div>
        </section>

        <!-- Step 3 -->
        <section class="wizard-step flex-hidden" data-step="3">
            <h2 class="report-section-title">Attachments</h2>
            <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
                <div class="fxg-f-col fxg-u-gap-2">
                    <label class="form-label">Upload</label>
                    <div id="dropzone" class="report-dropzone">
                        <input asp-for="Files" id="fileInput" type="file" class="flex-hidden" multiple accept="image/*,.pdf,.doc,.docx" />
                        <div class="report-dropzone-content">
                            <i class="bi bi-cloud-arrow-up"></i>
                            <p>Drag & drop images/documents here, or</p>
                            <button type="button" class="btn btn-success btn-sm" id="browseBtn">Browse Files</button>
                        </div>
                    </div>
                    <small class="report-hint">Accepted: images, PDF, DOC, DOCX</small>
                </div>
                <div class="fxg-f-col fxg-u-gap-2">
                    <label class="form-label">Selected Files</label>
                    <ul id="fileList" class="report-file-list"></ul>
                </div>
            </div>
        </section>

        <!-- Step 4 -->
        <section class="wizard-step flex-hidden" data-step="4">
            <h2 class="report-section-title">Review & Submit</h2>
            <!-- Single column container so button sits below summary -->
            <div class="fxg-g-grid fxg-g-cols-1">
                <div class="fxg-f-col report-review-box">
                    <h3>Summary</h3>

                    <!-- Two-column info grid inside the summary -->
                    <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
                        <dl class="report-review-dl">
                            <dt>Address</dt>
                            <dd id="revAddress"></dd>
                            <dt>Coordinates</dt>
                            <dd><span id="revLat"></span>, <span id="revLng"></span></dd>
                            <dt>Category</dt>
                            <dd id="revCategory"></dd>
                        </dl>

                        <dl class="report-review-dl">
                            <dt>Description</dt>
                            <dd id="revDescription"></dd>
                            <dt>Files</dt>
                            <dd id="revFiles"></dd>
                        </dl>
                    </div>
                </div>

                <!-- Submit button BELOW the summary box -->
                <div class="fxg-f-col fxg-f-main-center fxg-f-cross-center">
                    <button type="submit" class="btn btn-success btn-lg">Submit Report</button>
                </div>
            </div>
        </section>
    </form>
</main>

@section Scripts {
    <script src="~/js/Shared/wizard-helper.js" asp-append-version="true"></script>
    <script src="~/js/Shared/GoogleMaps/map-service.js" asp-append-version="true"></script>
    <script src="~/js/Shared/GoogleMaps/map-autocomplete-helper.js" asp-append-version="true"></script>
    <script src="~/js/Shared/GoogleMaps/map-helper.js" asp-append-version="true"></script>
    <script src="~/js/Shared/dropzone-helper.js" asp-append-version="true"></script>
    <script>
        "use strict";

        // ============================================================
        // Report Issue – Client Script
        // Organised into sections for clarity:
        // 1) Validation & DOM references
        // 2) Utilities (syncing, formatting, review)
		// 3) Wizard (navigation + progress)
        // 4) Map & Autocomplete
        // 5) Rich Text Editor (toolbar + validation)
        // 6) Attachments (dropzone)
        // ============================================================

        document.addEventListener("DOMContentLoaded", function () {

            // ------------------------------------------------------------
            // 1) Validation & DOM references
            // ------------------------------------------------------------

            if (window.ValidationHelper) {
                // Registers the custom validator so contentEditable maps to the hidden textarea
                ValidationHelper.registerRichTextRequired();
            }

            // Root containers
            const root = document.getElementById("reportIssueRoot");
            const form = document.getElementById("reportForm");

            // Location fields and UI
            const lat = document.getElementById("Latitude");
            const lng = document.getElementById("Longitude");
            const locationInput = document.getElementById("locationInput");
            const mapEl = document.getElementById("map");
            const useMyLocationBtn = document.getElementById("useMyLocationBtn");
            const coordsLabel = document.getElementById("coordsLabel");

            // Details fields (category + rich text)
            const category = document.getElementById("CategoryID");
            const rte = document.getElementById("rteEditor");
            const rteToolbar = document.getElementById("rteToolbar");
            const descriptionHidden = document.getElementById("descriptionHidden");

            // Review fields
            const revAddress = document.getElementById("revAddress");
            const revLat = document.getElementById("revLat");
            const revLng = document.getElementById("revLng");
            const revCategory = document.getElementById("revCategory");
            const revDescription = document.getElementById("revDescription");
            const revFiles = document.getElementById("revFiles");

            // Attachments UI
            const dropzone = document.getElementById("dropzone");
            const fileInput = document.getElementById("fileInput");
            const fileList = document.getElementById("fileList");
            const browseBtn = document.getElementById("browseBtn");

            // Initialize unobtrusive validation with custom options (if available)
            const v = window.ValidationHelper
                ? ValidationHelper.init("#reportForm", {
                    includeHidden: ["#descriptionHidden", "#Latitude", "#Longitude"],
                    focusOnError: true,
                    scrollToError: true
                })
                : null;

            if (window.ValidationHelper) {
                // Visually mark labels that are required based on data-val-* attributes
                ValidationHelper.markRequiredLabels(root);
            }

			// Wizard step engagement messages
			const messages = [
				"Pin the problem location on the map and confirm the address!",
				"Describe what’s wrong and choose the most relevant category",
				"Attach photos or documents that show the issue clearly",
				"Review your details and submit your report"
			];

            // ------------------------------------------------------------
            // 2) Utilities
            // ------------------------------------------------------------

            // Reads the current address string from the visible input
            function computeFormattedAddress() {
                return (locationInput.value || "").trim();
            }

            // Keeps the hidden textarea (posted to server) in sync with the contentEditable editor
            function syncDescription() {
                descriptionHidden.value = (rte.innerHTML || "").trim();
            }

            // Displays the coordinate label using a consistent format
            function setCoordsLabel(latVal, lngVal) {
                const latNum = Number(latVal);
                const lngNum = Number(lngVal);
                const ok = Number.isFinite(latNum) && Number.isFinite(lngNum);

                if (!coordsLabel) return;

                if (ok) {
                    coordsLabel.textContent = `Coordinates: ${latNum.toFixed(6)}, ${lngNum.toFixed(6)}`;
                    coordsLabel.classList.remove("text-danger");
                    coordsLabel.classList.add("text-muted");
                } else {
                    coordsLabel.textContent = "Coordinates: UNKNOWN";
                    coordsLabel.classList.add("text-danger");
                }
            }

            // Compiles current values into the Review section (Step 4)
            function updateReview() {
                revAddress.textContent = computeFormattedAddress() || "—";
                revLat.textContent = (lat.value || "").trim() || "—";
                revLng.textContent = (lng.value || "").trim() || "—";
                revCategory.textContent = category.options[category.selectedIndex]?.text || "—";
                revDescription.innerHTML = descriptionHidden.value || "—";

                const files = Array.from(fileInput.files || []);
                if (files.length === 0) {
                    revFiles.textContent = "No files attached";
                } else {
                    revFiles.innerHTML = files
                        .map(f => `<span class="report-file-pill" title="${f.name}">${f.name}</span>`)
                        .join(" ");
                }
            }

            // Ensure hidden description starts in sync (covers server-side pre-population)
            syncDescription();

			// ------------------------------------------------------------
			// 3) Wizard (navigation + progress)
			// ------------------------------------------------------------
			const wiz = window.WizardHelper && WizardHelper.init({
				container: "#reportIssueRoot",
				form: "#reportForm",
				stepSelector: ".wizard-step",
				nextSelector: "#nextBtn",
				prevSelector: "#prevBtn",
				progressBarSelector: "#wizardProgressBar",
				stepIndicatorSelector: "#stepIndicator",
				engagementSelector: "#engagementMessage",
				hiddenClass: "flex-hidden",
				validator: v,
				messages,
				beforeNext: (ctx) => {
					// Ensure description is up-to-date before leaving Details step
					if (ctx.step === 2) {
						syncDescription();
					}
					return true;
				},
				onShowStep: (ctx) => {
					// Populate Review step when it becomes visible
					if (ctx.step === 4) {
						syncDescription();
						updateReview();
					}
				},
				beforeFinish: () => {
					// Validate the entire form prior to submit
					syncDescription();
					if (v && typeof v.validateAll === "function") {
						const ok = v.validateAll();
						if (!ok && typeof v.focusFirstError === "function") v.focusFirstError();
						return ok;
					}
					return true;
				}
			});

            // ------------------------------------------------------------
            // 4) Map & Autocomplete
            // ------------------------------------------------------------
            (function initMapAndAutocomplete() {
                if (!window.MapUI) return; // Map helper not available; skip map wiring

                // Default center: use model values if present, else fallback (Cape Town)
                const defaultCenter = {
                    lat: parseFloat(lat.value) || -33.9249,
                    lng: parseFloat(lng.value) || 18.4241
                };

                MapUI.loadGoogleMaps().then(() => {
                    // Create map widget with marker and bindings to our hidden inputs
                    const widget = MapUI.createWidget({
                        mapEl: "#map",
                        inputEl: "#locationInput",
                        coordsLabelEl: "#coordsLabel",
                        latInputEl: "#Latitude",
                        lngInputEl: "#Longitude",
                        defaultCenter,
                        pickZoom: 15,
                        onChange: ({ lat: newLat, lng: newLng }) => setCoordsLabel(newLat, newLng)
                    });

                    // Expose for debugging if needed
                    window.__mapInstance = widget;

                    // Initialize coordinate label from current inputs
                    setCoordsLabel(lat.value, lng.value);

                    // Wire up places autocomplete
                    if (window.AutocompleteHelper) {
                        AutocompleteHelper.create({
                            inputEl: "#locationInput",
                            minLength: 3,
                            autoFetchDetails: true,
                            onSelect: ({ suggestion, details }) => {
                                const addr = (details?.formattedAddress || suggestion?.description || "").trim();
                                if (addr) {
                                    locationInput.value = addr;
                                    if (v?.validator) $(locationInput).valid();
                                }
                                if (details && Number.isFinite(details.lat) && Number.isFinite(details.lng)) {
                                    widget.setPosition(details.lat, details.lng, { reverseGeocodeOnPick: false });
                                }
                            }
                        });
                    }

                    // Pressing Enter in the address box performs a geocode lookup
                    locationInput.addEventListener("keydown", (e) => {
                        if (e.key !== "Enter" || e.defaultPrevented) return;
                        e.preventDefault();

                        const q = (locationInput.value || "").trim();
                        if (!q || !window.MapService?.AddressApi?.geocodeText) return;

                        MapService.AddressApi.geocodeText(q)
                            .then(d => {
                                const latNum = Number(d?.lat);
                                const lngNum = Number(d?.lng);
                                if (Number.isFinite(latNum) && Number.isFinite(lngNum)) {
                                    locationInput.value = (d?.formattedAddress || "").trim() || locationInput.value;
                                    if (v?.validator) $(locationInput).valid();
                                    widget.setPosition(latNum, lngNum, { reverseGeocodeOnPick: false });
                                }
                            })
                            .catch(() => { /* ignore geocode errors for UX smoothness */ });
                    });

                    // "Use my location" button via browser geolocation
                    if (useMyLocationBtn && navigator.geolocation) {
                        useMyLocationBtn.addEventListener("click", () => {
                            useMyLocationBtn.disabled = true;
                            navigator.geolocation.getCurrentPosition(
                                (pos) => {
                                    widget.setPosition(pos.coords.latitude, pos.coords.longitude, { reverseGeocodeOnPick: true });
                                    useMyLocationBtn.disabled = false;
                                },
                                () => {
                                    alert("Unable to get your location.");
                                    useMyLocationBtn.disabled = false;
                                    setCoordsLabel(null, null);
                                },
                                { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
                            );
                        });
                    } else if (useMyLocationBtn && !navigator.geolocation) {
                        useMyLocationBtn.addEventListener("click", () => alert("Geolocation is not supported by your browser."));
                    }
                });
            })();

            // ------------------------------------------------------------
            // 5) Rich Text Editor (toolbar + validation)
            // ------------------------------------------------------------

            // Toolbar buttons map to document.execCommand (simple formatting)
            rteToolbar.addEventListener("click", (e) => {
                const btn = e.target.closest("[data-cmd]");
                if (!btn) return;
                e.preventDefault();
                document.execCommand(btn.dataset.cmd, false, null);
                rte.focus();
                syncDescription();
                if (v) v.validateFields("#descriptionHidden");
            });

            // Keep hidden textarea (for model binding) in sync with contentEditable
            rte.addEventListener("input", () => {
                syncDescription();
                if (v) v.validateFields("#descriptionHidden");
            });

            // ------------------------------------------------------------
            // 6) Attachments (dropzone)
            // ------------------------------------------------------------
            if (window.DropzoneHelper) {
                const dz = DropzoneHelper.init({
                    dropzone: dropzone,
                    input: fileInput,
                    list: fileList,
                    browse: browseBtn,
                    dragOverClass: "is-dragover",
                    emptyListText: "No files selected",
                    clickToBrowse: true,
                    maxFiles: 10,
                    renderItem: (file, idx) => {
                        const li = document.createElement("li");
                        li.className = "report-file-list-item";
                        li.innerHTML = `
                            <span class="report-file-name">${file.name}</span>
                            <button type="button" class="btn btn-outline-danger btn-sm" data-dz-remove="${idx}"><i class="bi bi-x"></i></button>`;
                        return li;
                    },
                    validateInputOnChange: false,
                    onChange: () => {
                        if (v) v.validateFields("#fileInput");
                        updateReview();
                    }
                });

                // Initial review state reflects any pre-selected files
                updateReview();
            }
        });
    </script>
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">