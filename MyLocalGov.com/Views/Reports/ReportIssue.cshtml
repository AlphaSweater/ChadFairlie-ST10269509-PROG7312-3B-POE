@model MyLocalGov.com.ViewModels.Reports.IssueViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Report an Issue";
}
<head>
    <link rel="stylesheet" href="/css/Reports/ReportIssue.css" asp-append-version="true" />
</head>

<main class="fxg-u-container fxg-f-col fxg-u-gap-6 report-container" id="reportIssueRoot">
    <div class="fxg-f-row fxg-f-cross-center fxg-u-gap-4">
        <a asp-controller="Dashboard" asp-action="Index" class="report-breadcrumb-link">
            <i class="bi bi-arrow-left"></i>
            <span>Dashboard</span>
        </a>
        <span class="report-breadcrumb-separator">/</span>
        <span class="report-breadcrumb-current">Report Issue</span>
    </div>

    <section class="report-header">
        <h1 class="report-title">Report an Issue</h1>
        <p class="report-subtitle">Help your municipality address problems faster by reporting accurate details.</p>
    </section>

    <form asp-action="ReportIssue" asp-controller="Reports" method="post" enctype="multipart/form-data" class="fxg-f-col fxg-u-gap-6 report-form-card" id="reportForm">
        <!-- Wizard navigation at the top -->
        <div class="report-wizard-nav fxg-f-row fxg-f-main-between fxg-f-cross-center report-wizard-nav-top">
            <button type="button" class="btn btn-outline-success" id="prevBtn">Back</button>
            <div class="report-wizard-step-info fxg-f-col fxg-f-cross-center">
                <span id="engagementMessage">Let’s get started — Step 1 of 4</span>
                <div class="report-wizard-step-indicator">
                    <span id="stepIndicator">Step 1 of 4</span>
                </div>
            </div>
            <button type="button" class="btn btn-success" id="nextBtn">Next</button>
        </div>

        <!-- Hidden combined address to bind on submit -->
        <input asp-for="Address" type="hidden" id="Address" />

        <!-- Keep address parts as hidden so the server model can bind/validate -->
        <input asp-for="Street" type="hidden" id="Street" />
        <input asp-for="Suburb" type="hidden" id="Suburb" />
        <input asp-for="City" type="hidden" id="City" />
        <input asp-for="PostalCode" type="hidden" id="PostalCode" />

        <!-- Step 1 -->
        <section class="wizard-step" data-step="1">
            <h2 class="report-section-title">Location</h2>

            <div class="fxg-f-col fxg-u-gap-3">
                <!-- Hidden lat/lng fields (still bind and post) -->
                <input asp-for="Latitude" type="hidden" id="Latitude" />
                <input asp-for="Longitude" type="hidden" id="Longitude" />

                <div class="fxg-f-col fxg-u-gap-1">
                    <label for="locationInput" class="form-label">Search location</label>
                    <div class="fxg-f-row fxg-u-gap-2">
                        <input id="locationInput" class="form-control fxg-f-grow-1" placeholder="Search by address or place" autocomplete="off" />
                        <button type="button" class="btn btn-outline-success" id="useMyLocationBtn" title="Use my current location">
                            <i class="bi bi-crosshair"></i>
                        </button>
                    </div>
                    <!-- Subtle coordinates label under the search bar -->
                    <small id="coordsLabel" class="text-muted">Coordinates: UNKNOWN</small>
                </div>

                <div id="map" class="report-map" style="width: 100%; height: 320px; border-radius: 8px; overflow: hidden;"></div>
                <small class="report-hint">Drag the pin or click the map to adjust the location.</small>
            </div>
        </section>

        <!-- Step 2 -->
        <section class="wizard-step flex-hidden" data-step="2">
            <h2 class="report-section-title">Details</h2>
            <div class="fxg-f-col">
                <div class="fxg-f-col fxg-u-gap-0">
                    <label asp-for="CategoryID" class="form-label"></label>
                    <select asp-for="CategoryID" asp-items="Model.Categories" class="form-control"></select>
                    <span asp-validation-for="CategoryID" class="text-danger"></span>
                </div>
                <div class="fxg-f-col fxg-u-gap-0">
                    <div class="fxg-f-row">
                        <label class="form-label">Description (rich text)</label>
                        <div id="rteToolbar" class="report-rte-toolbar fxg-f-row fxg-u-gap-2">
                            <button type="button" class="btn btn-outline-success btn-sm" data-cmd="bold" title="Bold"><i class="bi bi-type-bold"></i></button>
                            <button type="button" class="btn btn-outline-success btn-sm" data-cmd="italic" title="Italic"><i class="bi bi-type-italic"></i></button>
                            <button type="button" class="btn btn-outline-success btn-sm" data-cmd="insertUnorderedList" title="Bulleted List"><i class="bi bi-list-ul"></i></button>
                        </div>
                    </div>
                    <div id="rteEditor" class="report-rte-editor" contenteditable="true" aria-label="Issue description"></div>

                    <!-- Add custom unobtrusive rule so "HTML-only" doesn't pass required -->
                    <textarea asp-for="Description"
                              id="descriptionHidden"
                              class="flex-hidden"
                              data-val="true"
                              data-val-rterequired="Description is required."></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                    <small class="report-hint">Use the toolbar above for basic formatting.</small>
                </div>
            </div>
        </section>

        <!-- Step 3 -->
        <section class="wizard-step flex-hidden" data-step="3">
            <h2 class="report-section-title">Attachments</h2>
            <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
                <div class="fxg-f-col fxg-u-gap-2">
                    <label class="form-label">Upload</label>
                    <div id="dropzone" class="report-dropzone">
                        <input asp-for="Files" id="fileInput" type="file" class="flex-hidden" multiple accept="image/*,.pdf,.doc,.docx" />
                        <div class="report-dropzone-content">
                            <i class="bi bi-cloud-arrow-up"></i>
                            <p>Drag & drop images/documents here, or</p>
                            <button type="button" class="btn btn-success btn-sm" id="browseBtn">Browse Files</button>
                        </div>
                    </div>
                    <small class="report-hint">Accepted: images, PDF, DOC, DOCX</small>
                </div>
                <div class="fxg-f-col fxg-u-gap-2">
                    <label class="form-label">Selected Files</label>
                    <ul id="fileList" class="report-file-list"></ul>
                </div>
            </div>
        </section>

        <!-- Step 4 -->
        <section class="wizard-step flex-hidden" data-step="4">
            <h2 class="report-section-title">Review & Submit</h2>
            <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
                <div class="fxg-f-col report-review-box">
                    <h3>Summary</h3>
                    <dl class="report-review-dl">
                        <dt>Address</dt>
                        <dd id="revAddress"></dd>
                        <dt>Coordinates</dt>
                        <dd><span id="revLat"></span>, <span id="revLng"></span></dd>
                        <dt>Category</dt>
                        <dd id="revCategory"></dd>
                        <dt>Description</dt>
                        <dd id="revDescription"></dd>
                        <dt>Files</dt>
                        <dd id="revFiles"></dd>
                    </dl>
                </div>
                <div class="fxg-f-col fxg-f-main-center fxg-f-cross-center">
                    <button type="submit" class="btn btn-success btn-lg">Submit Report</button>
                </div>
            </div>
        </section>
    </form>
</main>

@section Scripts {
    <script src="~/js/Shared/dropzone-helper.js" asp-append-version="true"></script>
	<script src="~/js/Shared/wizard-helper.js" asp-append-version="true"></script>
    <script src="~/js/Shared/map-helper.js" asp-append-version="true"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Register custom rule for RTE and initialize form validator
            if (window.ValidationHelper) {
                ValidationHelper.registerRichTextRequired();
            }

            // DOM lookups
            const form = document.getElementById("reportForm");
            const root = document.getElementById("reportIssueRoot");

            // Hidden address parts (server binding)
            const street = document.getElementById("Street");
            const suburb = document.getElementById("Suburb");
            const city = document.getElementById("City");
            const postalCode = document.getElementById("PostalCode");

            // Inputs
            const lat = document.getElementById("Latitude");
            const lng = document.getElementById("Longitude");
            const category = document.getElementById("CategoryID");
            const address = document.getElementById("Address");

            // Map elements
            const locationInput = document.getElementById("locationInput");
            const mapEl = document.getElementById("map");
            const useMyLocationBtn = document.getElementById("useMyLocationBtn");
            const coordsLabel = document.getElementById("coordsLabel");

            // Rich text editor bits
            const rte = document.getElementById("rteEditor");
            const rteToolbar = document.getElementById("rteToolbar");
            const descriptionHidden = document.getElementById("descriptionHidden");

            // Review fields
            const revAddress = document.getElementById("revAddress");
            const revLat = document.getElementById("revLat");
            const revLng = document.getElementById("revLng");
            const revCategory = document.getElementById("revCategory");
            const revDescription = document.getElementById("revDescription");
            const revFiles = document.getElementById("revFiles");

            // File upload UI
            const dropzone = document.getElementById("dropzone");
            const fileInput = document.getElementById("fileInput");
            const fileList = document.getElementById("fileList");
            const browseBtn = document.getElementById("browseBtn");

            // Initialize shared validator
            const v = window.ValidationHelper
                ? ValidationHelper.init("#reportForm", {
                    includeHidden: ["#descriptionHidden", "#Latitude", "#Longitude"],
                    focusOnError: true,
                    scrollToError: true
                })
                : null;

            // Add asterisks to labels of required fields
            if (window.ValidationHelper) {
                ValidationHelper.markRequiredLabels(root);
            }

            const messages = [
                "Let’s get started — Step 1 of 4",
                "Great! Add details — Step 2 of 4",
                "Almost there — Step 3 of 4",
                "Review and submit — Step 4 of 4"
            ];

            function computeFormattedAddress() {
                // Use the single search box as the authoritative formatted address
                return (locationInput.value || "").trim();
            }

            function syncDescription() {
                descriptionHidden.value = (rte.innerHTML || "").trim();
            }

            function updateReview() {
                revAddress.textContent = computeFormattedAddress() || "—";
                revLat.textContent = (lat.value || "").trim() || "—";
                revLng.textContent = (lng.value || "").trim() || "—";
                revCategory.textContent = category.options[category.selectedIndex]?.text || "—";
                revDescription.innerHTML = descriptionHidden.value || "—";
                const files = Array.from(fileInput.files || []);
                if (files.length === 0) {
                    revFiles.textContent = "No files attached";
                } else {
                    revFiles.innerHTML = files
                        .map(f => `<span class="report-file-pill" title="${f.name}">${f.name}</span>`)
                        .join(" ");
                }
            }

            function setCoordsLabel(latVal, lngVal) {
                const llOk = Number.isFinite(Number(latVal)) && Number.isFinite(Number(lngVal));
                if (!coordsLabel) return;
                if (llOk) {
                    const latFixed = Number(latVal).toFixed(6);
                    const lngFixed = Number(lngVal).toFixed(6);
                    coordsLabel.textContent = `Coordinates: ${latFixed}, ${lngFixed}`;
                    coordsLabel.classList.remove("text-danger");
                    coordsLabel.classList.add("text-muted");
                } else {
                    coordsLabel.textContent = "Coordinates: UNKNOWN";
                    coordsLabel.classList.add("text-danger");
                }
            }

            // Initialize DropzoneHelper
            if (window.DropzoneHelper) {
                const dz = DropzoneHelper.init({
                    dropzone: dropzone,
                    input: fileInput,
                    list: fileList,
                    browse: browseBtn,
                    dragOverClass: "is-dragover",
                    emptyListText: "No files selected",
                    clickToBrowse: true,
                    maxFiles: 10,
                    renderItem: (file, idx) => {
                        const li = document.createElement("li");
                        li.className = "report-file-list-item";
                        li.innerHTML = `
                            <span class="report-file-name">${file.name}</span>
                            <button type="button" class="btn btn-outline-danger btn-sm" data-dz-remove="${idx}"><i class="bi bi-x"></i></button>`;
                        return li;
                    },
                    validateInputOnChange: false,
                    onChange: () => {
                        if (v) v.validateFields(fileInput);
                        updateReview();
                    }
                });
                updateReview();
            }

            // WizardHelper
            if (window.WizardHelper) {
                WizardHelper.init({
                    container: "#reportIssueRoot",
                    form: "#reportForm",
                    stepSelector: ".wizard-step",
                    nextSelector: "#nextBtn",
                    prevSelector: "#prevBtn",
                    progressBarSelector: "#wizardProgressBar",
                    stepIndicatorSelector: "#stepIndicator",
                    engagementSelector: "#engagementMessage",
                    hiddenClass: "flex-hidden",
                    messages,
                    validator: v,
                    validateStep: (step, ctx) => {
                        if (step === 2) syncDescription();
                        if (!ctx.validator) return true;
                        const ok = ctx.validator.validateContainer(ctx.currentStepEl);
                        if (!ok) {
                            const msgEl = document.getElementById("engagementMessage");
                            if (msgEl) msgEl.textContent = "Please complete the required fields before continuing.";
                            if (typeof ctx.validator.focusFirstError === "function") {
                                ctx.validator.focusFirstError(ctx.currentStepEl);
                                const hiddenHasError = ctx.currentStepEl.querySelector("#descriptionHidden.input-validation-error, #descriptionHidden[aria-invalid='true']");
                                if (hiddenHasError) {
                                    rte.focus();
                                    rte.scrollIntoView({ behavior: "smooth", block: "center" });
                                }
                            }
                        }
                        return ok;
                    },
                    onShowStep: ({ step }) => {
                        if (step === 4) {
                            syncDescription();
                            updateReview();
                        }
                    },
                    beforeFinish: () => {
                        address.value = computeFormattedAddress();
                        syncDescription();
                        return true;
                    }
                });
            }

            // Rich text toolbar
            rteToolbar.addEventListener("click", (e) => {
                const btn = e.target.closest("[data-cmd]");
                if (!btn) return;
                e.preventDefault();
                document.execCommand(btn.dataset.cmd, false, null);
                rte.focus();
                syncDescription();
                if (v) v.validateFields("#descriptionHidden");
            });
            rte.addEventListener("input", () => {
                syncDescription();
                if (v) v.validateFields("#descriptionHidden");
            });

            // Google Maps: load, init, and wire up to form fields
            (function initMapPicker() {
                const lat = document.getElementById("Latitude");
                const lng = document.getElementById("Longitude");
                const street = document.getElementById("Street");
                const suburb = document.getElementById("Suburb");
                const city = document.getElementById("City");
                const postalCode = document.getElementById("PostalCode");
                const locationInput = document.getElementById("locationInput");
                const mapEl = document.getElementById("map");
                const useMyLocationBtn = document.getElementById("useMyLocationBtn");

                const defaultCenter = {
                    lat: parseFloat(lat.value) || -33.9249,
                    lng: parseFloat(lng.value) || 18.4241
                };

                MapHelper.loadGoogleMaps()
                    .then(() => {
                        const instance = MapHelper.init({
                            map: mapEl,
                            input: locationInput,
                            latInput: lat,
                            lngInput: lng,
                            defaultCenter,
                            zoom: 13,
                            pickZoom: 15,
                            draggable: true,
                            reverseGeocodeOnPick: true,
                            inputReflectsCoordinatesOnPick: true,
                            autocompleteOptions: { fields: ["place_id", "formatted_address", "geometry", "address_components"] },
                            // Pass hidden address parts so reverse geocode can populate them for the server model
                            addressFields: { street, suburb, city, postalCode },
                            onChange: ({ lat: la, lng: ln }) => {
                                setCoordsLabel(la, ln);
                            }
                        });
                        window.__mapInstance = instance;

                        // Initialize label with current (or default) coords
                        setCoordsLabel(lat.value, lng.value);

                        if (useMyLocationBtn) {
                            useMyLocationBtn.addEventListener("click", () => {
                                if (!navigator.geolocation) {
                                    alert("Geolocation is not supported by your browser.");
                                    return;
                                }
                                useMyLocationBtn.disabled = true;
                                navigator.geolocation.getCurrentPosition(
                                    (pos) => {
                                        const { latitude, longitude } = pos.coords;
                                        instance.setPosition(latitude, longitude, { reverseGeocodeOnPick: true });
                                        useMyLocationBtn.disabled = false;
                                    },
                                    (err) => {
                                        console.warn("Geolocation error:", err);
                                        alert("Unable to get your location.");
                                        useMyLocationBtn.disabled = false;
                                        // If we failed to get location, present UNKNOWN
                                        setCoordsLabel(null, null);
                                    },
                                    { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
                                );
                            });
                        }
                    });
            })();

            // Validate on direct submit (Submit button on Step 4)
            form.addEventListener("submit", (e) => {
                if (v && !v.validateAll()) {
                    e.preventDefault();
                    v.focusFirstError();
                    return;
                }
                // Persist formatted address from single input
                document.getElementById("Address").value = (document.getElementById("locationInput").value || "").trim();
                syncDescription();
            });
        });
    </script>
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">