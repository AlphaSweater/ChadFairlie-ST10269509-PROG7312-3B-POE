@model MyLocalGov.com.ViewModels.Reports.IssueViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Report an Issue";
}
<head>
    <link rel="stylesheet" href="/css/Shared/flexy-grids.css" asp-append-version="true" />
    <link rel="stylesheet" href="/css/Home/Dashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="/css/Home/Index.css" asp-append-version="true" />
    <link rel="stylesheet" href="/css/Reports/ReportIssue.css" asp-append-version="true" />
</head>

<main class="fxg-u-container fxg-f-col fxg-u-gap-6 fxg-u-p-4 dashboard-container" id="reportIssueRoot">
    <div class="fxg-f-row fxg-f-cross-center fxg-u-gap-4">
        <a asp-controller="Dashboard" asp-action="Index" class="breadcrumb-link">
            <i class="bi bi-arrow-left"></i>
            <span>Dashboard</span>
        </a>
        <span class="breadcrumb-separator">/</span>
        <span class="breadcrumb-current">Report Issue</span>
    </div>

    <section class="dashboard-header">
        <h1 class="dashboard-title">Report an Issue</h1>
        <p class="dashboard-subtitle">Help your municipality address problems faster by reporting accurate details.</p>
        <div class="user-info">
            <span id="engagementMessage">Let’s get started — Step 1 of 3</span>
        </div>
    </section>

    <section class="fxg-f-col fxg-u-gap-2">
        <div class="wizard-progress">
            <div class="wizard-progress-bar" id="wizardProgressBar" style="width: 50%;"></div>
        </div>
        <div class="fxg-f-row fxg-f-main-between fxg-f-cross-center wizard-steps-labels">
            <span>1. Location</span>
            <span>2. Details</span>
            <span>3. Review</span>
        </div>
    </section>

    <form asp-action="ReportIssue" asp-controller="Reports" method="post" enctype="multipart/form-data" class="fxg-f-col fxg-u-gap-6" id="reportForm">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <!-- Hidden combined address bound to ViewModel -->
        <input asp-for="Address" type="hidden" />
        <span asp-validation-for="Address" class="text-danger flex-hidden"></span>

        <!-- Step 1 -->
        <section class="report-card wizard-step" data-step="1">
            <h2 class="section-title">Location</h2>

            <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2 fxg-u-gap-4">
                <div class="fxg-f-col fxg-u-gap-3">
                    <div class="fxg-f-col">
                        <label asp-for="Street" class="form-label"></label>
                        <input asp-for="Street" class="form-control" placeholder="123 Main Road" />
                        <span asp-validation-for="Street" class="text-danger"></span>
                    </div>
                    <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2 fxg-u-gap-3">
                        <div class="fxg-f-col">
                            <label asp-for="Suburb" class="form-label"></label>
                            <input asp-for="Suburb" class="form-control" placeholder="Suburb" />
                            <span asp-validation-for="Suburb" class="text-danger"></span>
                        </div>
                        <div class="fxg-f-col">
                            <label asp-for="City" class="form-label"></label>
                            <input asp-for="City" class="form-control" placeholder="City" />
                            <span asp-validation-for="City" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="fxg-f-col">
                        <label asp-for="PostalCode" class="form-label"></label>
                        <input asp-for="PostalCode" class="form-control" placeholder="Postal code" />
                        <span asp-validation-for="PostalCode" class="text-danger"></span>
                    </div>
                </div>

                <div class="fxg-f-col fxg-u-gap-3">
                    <div class="fxg-g-grid fxg-g-cols-2 fxg-u-gap-3">
                        <div class="fxg-f-col">
                            <label asp-for="Latitude" class="form-label"></label>
                            <input asp-for="Latitude" class="form-control" />
                            <span asp-validation-for="Latitude" class="text-danger"></span>
                        </div>
                        <div class="fxg-f-col">
                            <label asp-for="Longitude" class="form-label"></label>
                            <input asp-for="Longitude" class="form-control" />
                            <span asp-validation-for="Longitude" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="map-placeholder">
                        <i class="bi bi-geo-alt"></i>
                        <p>Google Maps picker placeholder.</p>
                    </div>
                </div>
            </div>
        </section>

		<!-- Step 2 -->
		<section class="report-card wizard-step flex-hidden" data-step="2">
			<h2 class="section-title">Details</h2>
			<div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
				<div class="fxg-f-col fxg-u-gap-2">
					<label asp-for="CategoryID" class="form-label"></label>
					<select asp-for="CategoryID" asp-items="Model.Categories" class="form-control"></select>
					<span asp-validation-for="CategoryID" class="text-danger"></span>
				</div>
				<div class="fxg-f-col fxg-u-gap-2">
					<label class="form-label">Description (rich text)</label>
					<div id="rteToolbar" class="rte-toolbar fxg-f-row fxg-u-gap-2">
						<button type="button" class="btn btn-outline-success btn-sm" data-cmd="bold" title="Bold"><i class="bi bi-type-bold"></i></button>
						<button type="button" class="btn btn-outline-success btn-sm" data-cmd="italic" title="Italic"><i class="bi bi-type-italic"></i></button>
						<button type="button" class="btn btn-outline-success btn-sm" data-cmd="insertUnorderedList" title="Bulleted List"><i class="bi bi-list-ul"></i></button>
					</div>
					<div id="rteEditor" class="rte-editor" contenteditable="true" aria-label="Issue description"></div>
					<textarea asp-for="Description" id="descriptionHidden" class="flex-hidden"></textarea>
					<span asp-validation-for="Description" class="text-danger"></span>
					<small class="hint">Use the toolbar above for basic formatting.</small>
				</div>
			</div>
		</section>

		<!-- Step 3 -->
		<section class="report-card wizard-step flex-hidden" data-step="3">
			<h2 class="section-title">Attachments</h2>
			<div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
				<div class="fxg-f-col fxg-u-gap-2">
					<label class="form-label">Upload</label>
					<div id="dropzone" class="dropzone">
						<input asp-for="Files" id="fileInput" type="file" class="flex-hidden" multiple accept="image/*,.pdf,.doc,.docx" />
						<div class="dropzone-content">
							<i class="bi bi-cloud-arrow-up"></i>
							<p>Drag & drop images/documents here, or</p>
							<button type="button" class="btn btn-success btn-sm" id="browseBtn">Browse Files</button>
						</div>
					</div>
					<small class="hint">Accepted: images, PDF, DOC, DOCX</small>
				</div>
				<div class="fxg-f-col fxg-u-gap-2">
					<label class="form-label">Selected Files</label>
					<ul id="fileList" class="file-list"></ul>
				</div>
			</div>
		</section>

        <!-- Step 4 -->
        <section class="report-card wizard-step flex-hidden" data-step="4">
            <h2 class="section-title">Review & Submit</h2>
            <div class="fxg-g-grid fxg-g-cols-1 fxg-g-md-cols-2">
                <div class="fxg-f-col review-box">
                    <h3>Summary</h3>
                    <dl class="review-dl">
                        <dt>Address</dt>
                        <dd id="revAddress"></dd>
                        <dt>Coordinates</dt>
                        <dd><span id="revLat"></span>, <span id="revLng"></span></dd>
                        <dt>Category</dt>
                        <dd id="revCategory"></dd>
                        <dt>Description</dt>
                        <dd id="revDescription"></dd>
                        <dt>Files</dt>
                        <dd id="revFiles"></dd>
                    </dl>
                </div>
                <div class="fxg-f-col fxg-f-main-center fxg-f-cross-center">
                    <button type="submit" class="btn btn-success btn-lg">Submit Report</button>
                </div>
            </div>
        </section>

        <!-- Single navigation bar for all steps -->
        <div class="fxg-f-row fxg-f-main-between fxg-u-mt-2">
            <button type="button" class="btn btn-outline-success" id="prevBtn">Back</button>
            <button type="button" class="btn btn-success" id="nextBtn">Next</button>
        </div>
    </form>
</main>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const steps = Array.from(document.querySelectorAll(".wizard-step"));
            const progressBar = document.getElementById("wizardProgressBar");
            const engagement = document.getElementById("engagementMessage");
            const prevBtn = document.getElementById("prevBtn");
            const nextBtn = document.getElementById("nextBtn");
            const form = document.getElementById("reportForm");

            // RTE
            const rte = document.getElementById("rteEditor");
            const rteToolbar = document.getElementById("rteToolbar");
            const descriptionHidden = document.getElementById("descriptionHidden");

            // Address parts + hidden combined
            const street = document.getElementById("Street");
            const suburb = document.getElementById("Suburb");
            const city = document.getElementById("City");
            const postal = document.getElementById("PostalCode");
            const addressCombined = document.getElementById("Address");

            // Other fields
            const lat = document.getElementById("Latitude");
            const lng = document.getElementById("Longitude");
            const category = document.getElementById("CategoryID");

            // Review
            const revAddress = document.getElementById("revAddress");
            const revLat = document.getElementById("revLat");
            const revLng = document.getElementById("revLng");
            const revCategory = document.getElementById("revCategory");
            const revDescription = document.getElementById("revDescription");
            const revFiles = document.getElementById("revFiles");

            // Attachments
            const dropzone = document.getElementById("dropzone");
            const fileInput = document.getElementById("fileInput");
            const fileList = document.getElementById("fileList");
            const browseBtn = document.getElementById("browseBtn");

            let current = 0;
            const stepStack = []; // stack-based navigation history
            const messages = [
                "Let’s get started — Step 1 of 3",
                "Great! Add details — Step 2 of 3",
                "Review and submit — Step 3 of 3"
            ];

            function showStep(index) {
                steps.forEach((s, i) => s.classList.toggle("flex-hidden", i !== index));
                const pct = ((index + 1) / steps.length) * 100;
                progressBar.style.width = pct + "%";
                engagement.textContent = messages[index];
                prevBtn.disabled = index === 0;
                nextBtn.textContent = index === steps.length - 1 ? "Finish" : "Next";
            }

            function syncDescription() {
                descriptionHidden.value = rte.innerHTML.trim();
            }

            function syncAddress() {
                const parts = [street.value, suburb.value, city.value, postal.value]
                    .map(x => (x || "").trim())
                    .filter(x => x.length > 0);
                addressCombined.value = parts.join(", ");
            }

            function updateReview() {
                syncAddress();
                syncDescription();
                revAddress.textContent = addressCombined.value || "—";
                revLat.textContent = lat.value || "—";
                revLng.textContent = lng.value || "—";
                revCategory.textContent = category.options[category.selectedIndex]?.text || "—";
                revDescription.innerHTML = descriptionHidden.value || "—";
                const files = Array.from(fileInput.files || []);
                if (files.length === 0) {
                    revFiles.textContent = "No files attached";
                } else {
                    revFiles.innerHTML = files.map(f => `<span class="file-pill" title="${f.name}">${f.name}</span>`).join(" ");
                }
            }

            function validateStep(idx) {
                if (idx === 0) {
                    const hasCoords = (lat.value?.trim().length > 0) && (lng.value?.trim().length > 0);
                    const hasMinAddress = (street.value?.trim().length > 0) && (city.value?.trim().length > 0);
                    if (!hasCoords && !hasMinAddress) return false;
                    syncAddress(); // keep VM updated on next
                    return true;
                }
                if (idx === 1) {
                    syncDescription();
                    const plain = descriptionHidden.value.replace(/<[^>]*>/g,'').trim();
                    return !!category.value && plain.length > 0;
                }
                return true;
            }

            prevBtn.addEventListener("click", () => {
                if (stepStack.length > 0) {
                    current = stepStack.pop();
                    showStep(current);
                } else if (current > 0) {
                    current--;
                    showStep(current);
                }
            });

            nextBtn.addEventListener("click", () => {
                if (!validateStep(current)) {
                    engagement.textContent = "Please complete the required fields before continuing.";
                    return;
                }

                if (current < steps.length - 1) {
                    // push current onto stack before moving forward
                    stepStack.push(current);

                    if (current === steps.length - 2) {
                        updateReview(); // moving into Review
                    }

                    current++;
                    showStep(current);
                } else {
                    // Finish
                    syncAddress();
                    syncDescription();
                    form.submit();
                }
            });

            // RTE toolbar
            rteToolbar.addEventListener("click", (e) => {
                const btn = e.target.closest("[data-cmd]");
                if (!btn) return;
                e.preventDefault();
                document.execCommand(btn.dataset.cmd, false, null);
                rte.focus(); syncDescription();
            });
            rte.addEventListener("input", syncDescription);

            // Dropzone UX
            function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
            ["dragenter","dragover","dragleave","drop"].forEach(evt => dropzone.addEventListener(evt, preventDefaults));
            ["dragenter","dragover"].forEach(evt => dropzone.addEventListener(evt, () => dropzone.classList.add("is-dragover")));
            ["dragleave","drop"].forEach(evt => dropzone.addEventListener(evt, () => dropzone.classList.remove("is-dragover")));

            dropzone.addEventListener("drop", (e) => {
                const dt = e.dataTransfer;
                if (!dt?.files?.length) return;
                const existing = Array.from(fileInput.files || []);
                const merged = new DataTransfer();
                [...existing, ...Array.from(dt.files)].forEach(f => merged.items.add(f));
                fileInput.files = merged.files;
                renderFiles();
            });

            function renderFiles() {
                fileList.innerHTML = "";
                const files = Array.from(fileInput.files || []);
                if (files.length === 0) {
                    const li = document.createElement("li");
                    li.textContent = "No files selected";
                    fileList.appendChild(li);
                    return;
                }
                files.forEach((f, idx) => {
                    const li = document.createElement("li");
                    li.className = "file-list-item";
                    li.innerHTML = `
                        <span class="file-name">${f.name}</span>
                        <button type="button" class="btn btn-outline-danger btn-sm" data-remove="${idx}">
                            <i class="bi bi-x"></i>
                        </button>
                    `;
                    fileList.appendChild(li);
                });
            }

            browseBtn.addEventListener("click", () => fileInput.click());
            fileInput.addEventListener("change", renderFiles);
            fileList.addEventListener("click", (e) => {
                const btn = e.target.closest("[data-remove]");
                if (!btn) return;
                const idx = parseInt(btn.getAttribute("data-remove"), 10);
                const files = Array.from(fileInput.files);
                const dt = new DataTransfer();
                files.forEach((f, i) => { if (i !== idx) dt.items.add(f); });
                fileInput.files = dt.files;
                renderFiles();
                updateReview();
            });

            // Init
            showStep(current);
            renderFiles();
        });
    </script>
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">